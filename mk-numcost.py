#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Михаил Колодин, 2015-03-08, 1.1
# определение цены телефонного (автомобильного и т.п.) номера как обратно пропорциональной частоте появления его и ему подобных; подобие - пока только по одинаковости цифр

from __future__ import division
import collections

# число цифр, длина номера
NUMLEN = 4

# список на оценку
numlist = "0000 0124 0101 5651 9876 9911 1234 0911 1968 2020".split()
#~ numlist = "012 222 344".split()
#~ numlist = "01 22 34".split()

# решение

# всего номеров
TOTAL = 10**NUMLEN

freq = collections.Counter()
quot = collections.Counter()

def countall():
    """найти все частоты и дать оценки"""
    # найти частоты для всех номеров
    for n in xrange(TOTAL):
        freq [est(n)] += 1
    print freq
    # нормализовать их
    allsum = 0
    for el in freq:
        quot [el] = TOTAL / freq[el]
    print quot
    # расчёт дохода
    asum = 0.0
    for n in xrange(TOTAL):
        asum += quot [est(n)]
    print "\nОбщая выручка: $%6.2f при средней цене номера $%4.2f" % (asum, asum / TOTAL)

def est (n):
    """найти эквивалент числа"""
    alf = list("abcdefghij")
    tab = {}
    c = n

    r = c % 10
    res = alf.pop(0)
    tab [r] = res
    for i in xrange(NUMLEN-1):
        c = c // 10
        r = c % 10
        if r not in tab:
            a = alf.pop(0)
            tab [r] = a
        res += tab [r]

    # поправки к эквиваленту
    res = est_ana(res)
    #~ res = est_dif(res)
    return res

def est_ana (s):
    """доп. оценка - сделать анаграмму"""
    u = list(s)
    u.sort()
    u = "".join(u)
    return u

def est_dif (s):
    """доп. оценка - по разным цифрам"""
    u = list(set(list(s)))
    u.sort()
    u = "".join(u)
    return u

def solve (num):
    """показать цену для данного номера"""
    eq = est(int(num))
    print "для номера %s код равен %s и цена равна $%04.2f" % (num, eq, quot[eq])

def main():
    """организатор"""
    print "\nПривет. Оцениваем номера"
    countall()
    print "\nА вот и рассчитанные цены:"
    for num in numlist:
        solve (num)

main()

#~ кроме того, можно учесть:
    #~ - последовательности, подрядность цифр:
        #~ 1234 лучше, чем 1423
        #~ (даже в покере)
    #~ - особые последовательности, типа 111 (самый первый и главный), 666 (дьявол, зверь), 777 (счастье), 007 (агент)
        #~ номер с 666666 был продан за десятки миллионов долларов
    #~ - симметрию (1221)
    #~ - и их комбинации, смены направлений, типа  12321, 1122332211,
    #~ - особые цифры и регулярное повторене цифры, типа 102030,
    #~ - для длинных номеров: группы цифр (112211) как цифру, их симметрии и т.п.
    #~ - звучание на англ. яз. (2 = к, на, без, тоже, "it's 2 2 2 2"; 4 = для)
    #~ - здесь цены линейно обратно пропорциональный числу входждений, а можно и иначе, напр., квадратично
    #~ - цену можно назначать и иначе, напр., если общий ресурс $1.000ю000, то и делить придётся от общего ресурса, а не от каждого отдельного номера
    #~ - и т.п.

#~ ab': 270, 'abbb': 90, 'aaaa': 10})
#~ Counter({'aaaa': 1000.0, 'abbb': 111.11111111111111, 'aabb': 37.03703703703704, 'aaab': 37.03703703703704, 'abcc': 13.88888888888889, 'abbc': 6.944444444444445, 'aabc': 4.62962962962963, 'abcd': 1.9841269841269842})
#~
#~ Общая выручка: $80000.00 при средней цене номера $8.00
#~
#~ А вот и рассчитанные цены:
#~ для номера 0000 код равен aaaa и цена равна $1000.00
#~ для номера 0124 код равен abcd и цена равна $1.98
#~ для номера 0101 код равен aabb и цена равна $37.04
#~ для номера 5651 код равен abbc и цена равна $6.94
#~ для номера 9876 код равен abcd и цена равна $1.98
#~ для номера 9911 код равен aabb и цена равна $37.04
#~ для номера 1234 код равен abcd и цена равна $1.98
#~ для номера 0911 код равен aabc и цена равна $4.63
#~ для номера 1968 код равен abcd и цена равна $1.98
#~ для номера 2020 код равен aabb и цена равна $37.04
